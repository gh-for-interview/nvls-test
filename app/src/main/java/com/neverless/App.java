/*
 * This source file was generated by the Gradle 'init' task
 */
package com.neverless;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.neverless.domain.Money;
import com.neverless.domain.account.AccountRepository;
import com.neverless.domain.account.AccountRepositoryInMem;
import com.neverless.domain.transaction.TransactionRepository;
import com.neverless.domain.transaction.TransactionRepositoryInMem;
import com.neverless.integration.WithdrawalService;
import com.neverless.resources.Resources;
import com.neverless.service.*;
import io.javalin.Javalin;
import io.javalin.json.JavalinJackson;

import java.time.Duration;
import java.util.concurrent.Executors;


public class App {
    private final Javalin javalin;
    private final ScheduledTransactionProcessor transactionProcessor;

    public final AccountRepository accountRepository;
    public final TransactionRepository transactionRepository;
    public final WithdrawalService<Money> withdrawalService;

    public App(WithdrawalService<Money> withdrawalService) {
        this.accountRepository = new AccountRepositoryInMem();
        this.transactionRepository = new TransactionRepositoryInMem();
        this.withdrawalService = withdrawalService;

        final var withdrawalStatusChecker = new WithdrawalStateChecker(withdrawalService, transactionRepository);
        final var transactionManager = new TransactionManager(transactionRepository, accountRepository);
        final var withdrawalHandler = new WithdrawalHandler(withdrawalService, accountRepository, transactionManager);

        final var resources = new Resources(accountRepository, withdrawalStatusChecker, withdrawalHandler);

        this.transactionProcessor = new ScheduledTransactionProcessor(
            Executors.newScheduledThreadPool(1),
            Duration.ofSeconds(1),
            new WithdrawalTransactionProcessor(withdrawalStatusChecker, transactionRepository, transactionManager)
        );

        this.javalin = Javalin.create(config -> {
            config.jsonMapper(new JavalinJackson(
                new ObjectMapper()
                    .registerModule(new Jdk8Module())
                    .registerModule(new JavaTimeModule()),
                false
            ));
            config.bundledPlugins.enableDevLogging();
            config.router.mount(resources::register);
        });
    }

    public void start(int port) {
        transactionProcessor.start();
        javalin.start(port);
    }

    public void stop() {
        javalin.stop();
    }

    public int port() {
        return javalin.port();
    }

    public static void main(String[] args) {
        final var app = new App(null);
        Runtime.getRuntime().addShutdownHook(new Thread(app::stop));
        app.start(8080);
    }
}
